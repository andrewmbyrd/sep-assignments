1. The difference between the binary search tree and the heap is that the Binary Tree CAN end up
just being a linked list. If the values on which we are sorting are only increasing or only decreasing,
then we have just one long chain. So the BST can be very asymmetric about the root.

With the heap, you always fill in a level before moving on to the next one, and you always move left to right.
This provides some conveniences for printing the thing, but it also made the logic for insertions and
deletions quite complicated.


2. So this was the worst case scenario for the BST. The numbers were all ascending, which means
we just wound up with a super inefficient LinkedList that only had values out to the right, but
had to carry out operations as if it were a tree. I did 10,000 insertions, each of which had
to start at the root, and go 2 jumps, 3 jumps, 4 jumps ..... 9,999 jumps to get in place. That
took 3.4 seconds on my computer so 3.4/10,000 seconds on average, although the later entries
would have taken much, much longer than the early entries.

For the heap, this is the absolute best case scenario. We had a min heap, so no values ever
needed to be re-arranged on insertion. Total time to insert 10,000 items was 0.0058 seconds.

Deletion didn't take terribly long for either data structure. 0.0004 seconds on average for the
BST, and 100 times better on the heap: 0.000005. For some reason, both data structures took about
twice as long for the first deletion compared to the other 4 I took. (I just randomly chose 5
total deltions to get an average).

You want to use the BST when the data to be inserted is randomly arranged. The BST insertion
rules make it so that you can very quickly get to higher or lower values with a search, because
ideally, you can eliminated about half of the nodes with each pass.

The Heap is best suited for data that is to be inserted in ascending or descending order. It
has the advantage over an array in that all of its data is stored in nodes, so spatial locality
is minimized.
