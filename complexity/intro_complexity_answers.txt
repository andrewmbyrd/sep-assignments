1. An algorithm with O(1) efficiency is like saying the definition of a word you already know. An algorithm with O(2^n) efficiency is like
walking to the library, getting a library card, checking out a dictionary, looking up the word, and then reading out the definition.

2. The best case for a binary search is that the item we are looking for is in the center of the list (which we know is sorted), so we find it on the first
iteration.

3. The worst case scenario in binary search is that the item we want to find is at the very end of the list. EITHER end of the list. And this is true for
EVERY list we create. Because in the binary search we are effectively searching a new, smaller array with every pass. So if I have the array:
[1, 2, 3, 4, 5, 6 7]. If I want to find 7, then I'll do:
Pass 1: find 4 so split into [5, 6, 7]
Pass 2: find 6, so split into [7]
Pass 3: find 7.

But It's just as bad if I want to find 3:
Pass 1: find 4 so split into [1, 2, 3]
Pass 2: find 2 so split into [3]
Pass 3: find 3.

So ANYTIME the item we want ends up at the end of A list, then we'll run into the worst case.

4. So the bounded case is one in which our term is neither on the end of our list, but also not directly in the middle. So in the example above,
finding 6 would take 2 passes.

5.
6. Asymptotic limit for data in the csv is infinity

7. Big(O) notation for the data in the csv is O(2^n).

8. attached.
9. attached.

10. O(logN)
11. Big-Omega(1)
12. Big-Theta(C*logN) = logN
